package bt.core.collections.dataTypes;

import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.Iterator;

public class GuardedLinkedListDoubleCopy extends AbstractList implements List {
	private Element hdAndTail = new Element(null);
	private int size;
	
	@Override
	public Iterator iterator() {
		return null;
	}

	@Override
	public void add(Object val) {
		// TODO Auto-generated method stub
	}

	@Override
	public void clear() {
		hdAndTail.previous = hdAndTail;
		hdAndTail.next = hdAndTail;
		size = 0;
	}

	@Override
	public boolean contains(Object val) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object delete(int idx) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean delete(Object val) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object get(int idx) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int indexOf(Object val) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void insert(int idx, Object val) throws IndexOutOfBoundsException {
		if( idx < 0 || idx > size)
			throw new IndexOutOfBoundsException();
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public Object set(int idx, Object val) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		return size;
	}
	
	private class Element {
		Element previous;
		Element next;
		Object val;
		
		public Element(Object val) {
			previous = next = null;
			this.val = val;
		}
	}
}
