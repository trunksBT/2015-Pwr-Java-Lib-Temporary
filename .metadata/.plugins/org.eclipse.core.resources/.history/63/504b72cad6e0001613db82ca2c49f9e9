package bt.collections.graphs;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingQueue;

import bt.algorithms.interfaces.IGrafC07;
import bt.algorithms.interfaces.IGraphComponents;
import bt.algorithms.interfaces.IKrawedz;

public class GraphComponents<W,S> implements IGraphComponents<W,S>{
	
	@Override
	public List<IGrafC07<W, S>> spojneSkladowe(IGrafC07<W, S> graph) {
		List<IKrawedz<W, S>> krawedzie = new LinkedList<>();
		Map<W, Boolean> czyOdwiedzone = new TreeMap<>();
		
//		TreeMap<WQueue<W> wierzcholki = new LinkedBlockingQueue<W>(graph.wierzcholki());
		
		return null;
	}
	
	private void wyzerujTabliceOdwiedzin(List<W> wierzcholki)
	{
		Map<W, Boolean> czyOdwiedzone = new TreeMap<>();
		for(W wierzcholek : wierzcholki)
		{
			czyOdwiedzone.put(wierzcholek, false);
		}
		return czyOdwiedzone;
	}

}
