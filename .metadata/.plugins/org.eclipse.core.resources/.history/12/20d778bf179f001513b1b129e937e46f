package Bt.Tests.Core.Collections;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import Bt.Core.ABC.OneDimTable;
import Bt.Core.Collections.SetNatural;
import junit.framework.TestCase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class TestOneDimTableNatural extends TestCase {

	@Test
	public void test_ASig_Method_TableState_NewElRelation()
	{
	    assertTrue(true);
	}
	
  @Test
  public void test_CTOR_and_Equal()
  {
      //arrange
	  int[] inTable = {1,2,3,4,5,6};
	  int[] inTable2 = {1,2,3,4,5,6};
      OneDimTable _inTape = new OneDimTable(5,inTable);  
      OneDimTable _outTape = new OneDimTable(5,inTable2);
      boolean expected = true;
      
      //act
      boolean reached = _inTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_Internal()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,4,5,6};
	  int expectSize = 6;
	  
	  int el = 4;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_NewLeftLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {0,1,2,3,5,6};
	  int expectSize = 6;
	  
	  int el = 0;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_EqualToLeftLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,1,2,3,5,6};
	  int expectSize = 6;
	  
	  int el = 1;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_EqualToSecond()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,2,3,5,6};
	  int expectSize = 6;
	  
	  int el = 2;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_PreviousOfLast()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,5,5,6};
	  int expectSize = 6;
	  
	  int el = 5;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_NewRightLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,5,6,7};
	  int expectSize = 6;
	  
	  int el = 7;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_EqualToRightLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,5,6,6};
	  int expectSize = 6;
	  
	  int el = 6;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Empty()
  {
      //arrange
	  int[] inTable = {};
	  int inSize = 0;

	  int[] expectTable = {4};
	  int expSize = 1;
	  int el = 4;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Single_Lower()
  {
      //arrange
	  int[] inTable = {6};
	  int inSize = 1;

	  int[] expectTable = {4,6};
	  int expSize = 2;
	  int el = 4;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Single_Higher()
  {
      //arrange
	  int[] inTable = {6};
	  int inSize = 1;

	  int[] expectTable = {6,8};
	  int expSize = 2;
	  int el = 8;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
}
