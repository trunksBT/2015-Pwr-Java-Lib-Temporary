package Bt.Core.Collections;

import java.util.*;
import java.util.Map.Entry;

import Bt.Core.Collections.Interfaces.IGraf;

public class IndirectedGraph<W,S> implements IGraf<W,S>{
	
	S[][] _matrix;	
	Hashtable<W,Integer> _nodes;
	ArrayList<W> _vertices;
	
	public IndirectedGraph(Hashtable<W, Integer> aNodes,S[][] aConnectionMatrix) {
		_nodes = aVertices;
		_matrix = aConnectionMatrix;
	}
	
	public IndirectedGraph(ArrayList<W> aVertices,S[][] aConnectionMatrix,boolean true) {
		_matrix = aConnectionMatrix;
		_vertices = aVertices;	
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<W> Wierzcholki() {			

		List<W> retVal = new ArrayList<W>();
				
		if(_nodes!=null)		
			retVal = new ArrayList<W>((Collection<? extends W>) (_nodes.entrySet()));
		
		return retVal;
	}
	
	@Override
	public S Krawedz(W aW1, W aW2) {
		S retVal = null;
		
		if(!(aW1 == null || aW2 == null))
			retVal = _matrix[_nodes.get(aW1)][_nodes.get(aW2)];
		
		return retVal;
	}
//	
//	@SuppressWarnings("unchecked")
//	@Override
//	public List<W> Krawedzie(W aW) {
//		List<W> retVal = new LinkedList<>();
//		ArrayList<Integer> idxes = new ArrayList<>();
////		List<Tuple<Integer,W>> entrySet = entrySetToListOfTuple();
////		PriorityQueue<Tuple<Integer,W>> prioQueue = toPriorityQueue(entrySet);
//		
//		if(aW!=null && _nodes!=null && _matrix!= null)
//		{						
//			if(_nodes.getOrDefault(aW, null) != null)
//			{
//				S[] connections = _matrix[_nodes.get(aW)];
//				int len = connections.length;
//				int iter = -1;
//				
//				while(++iter<len)
//					if(connections[iter]!=null)
//						idxes.add(iter);
//				
//				for(int i = 0 ; i < idxes.size() ;)
//				{
//					Tuple<Integer,W> searchedEl = prioQueue.poll();
//					int searchedVerticeIdx = idxes.get(i);
//										
//					if(searchedVerticeIdx == searchedEl.key)
//					{
//						retVal.add(searchedEl.value);
//						i++;
//					}
//				}			
//			}
//		}		
//		return retVal;
//	}
	
//	private List<Tuple<Integer,W>> entrySetToListOfTuple()
//	{
//		List<Tuple<Integer,W>> retVal = new LinkedList<>();
//		
//		for(Map.Entry<W, Integer> entry : _nodes.entrySet())
//			retVal.add(new Tuple<Integer,W>(entry.getValue(),entry.getKey()));
//		
//		return retVal;
//	}
//	private PriorityQueue<Tuple<Integer,W>> toPriorityQueue(List<Tuple<Integer,W>> aInput)
//	{
//		PriorityQueue<Tuple<Integer,W>> retVal = new PriorityQueue<>();
//		
//		for(Tuple<Integer,W> buff : aInput)
//			retVal.add(buff);
//		
//		return retVal;
//	}
}
