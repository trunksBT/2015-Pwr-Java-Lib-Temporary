package bt.collections.lists;

public class RatajList2 {
//	
//	public int maxVal() {
//		int max = root.val;
//		RatajElem l = root.next;
//		
//		while( l!= null ) {
//			if( l.val > max )
//				max = l.val;
//			l = l.next;
//		}
//		
//		return max;
//	}



	RatajElem2 root;
	public RatajList2(RatajElem2 root) {
		this.root = root;
	}

	public RatajList2() {
		root = null;
	}

	public static void print(RatajElem2 hd) {
		while( hd!= null ) {
			System.out.println( hd.val );
			hd = hd.next;
		}
	}
	
	public int maxVal() {
		if( root!= null ) {
			int currMax = root.val;
			RatajElem2 refToRoot = root;
			
			while( refToRoot != null ) {
				if( currMax < refToRoot.val )
					currMax = refToRoot.val;
				
				refToRoot = refToRoot.next;
			}
			
			return currMax;
		}else
			throw new NullPointerException("There is null root");
	}

	//
//	public void add(int val) {
//		RatajElem newElem = new RatajElem(val);
//		
//		if( root == null )
//			root = newElem;
//		else {
//			RatajElem hd = root;
//			
//			while( hd.next != null )
//				hd = hd.next;
//			
//			hd.next = newElem;
//		}
//	}
	
	public void add(int newVal) {
		RatajElem2 newElem = new RatajElem2(newVal);
		
		if( root != null ) {
			RatajElem2 hd = root;
			
			while( hd.next != null )
				hd = hd.next;
			
			hd.next = newElem;
		}else
			root = newElem;
	}

	public int size() {
		int retVal = 0;
		if( root != null ) {
			RatajElem2 refToRoot = root;
			
			while( refToRoot != null ) {
				retVal++;
				refToRoot = refToRoot.next;
			}				
		}
		return retVal;
	}
	
	public RatajElem2 getElem(int searchedVal) {
		RatajElem2 retVal = null;
		RatajElem2 hd = root;
		
		while( hd != null && retVal == null) {
			if( hd.val == searchedVal )
				retVal = hd;
			hd = hd.next;
		}
					
		return retVal;
	}

	public void attachAfter(RatajElem2 afterWhich, int newVal) {
		if( afterWhich == null )
			root = new RatajElem2(newVal);
		else
			afterWhich.next = new RatajElem2(newVal, afterWhich.next);
	}
		
	public void delete(int toDel) {
		if( root != null ) {
			if( root.val == toDel )
				root = root.next;
			else {
				RatajElem2 refToRoot = root;
				
				while(refToRoot.next != null && refToRoot.next.val != toDel )
					refToRoot = refToRoot.next;
				
				if( refToRoot.next != null )
					refToRoot.next = refToRoot.next.next;
			}
		}
	}
}
