package bt.core.collections.dataTypes.trees;

import bt.core.algorithms.comparators.NaturalComparator;
import bt.core.algorithms.interfaces.Comparator;
import bt.core.collections.interfaces.Tree;
import bt.core.exceptions.DuplicateItemException;
import bt.core.exceptions.ItemNotFoundException;

public class BST2 implements Tree {
	private final Comparator order;
	private int size;
	private Node2 root;
	
	public BST2(NaturalComparator order) {
		this.order = order;
		size = 0;
		root = null;
	}

	@Override
	public Object find(Object searchedVal) {
		Node2 copyOfRoot = root;
		copyOfRoot = find( searchedVal, root);
		return copyOfRoot != null ? copyOfRoot.val : null;
	}

	private Node2 find(Object searchedVal, Node2 currNode) {
		int localOrder;
		while( currNode != null && (localOrder = order.compare( searchedVal, currNode.val )) != 0) {
			if ( localOrder < 0)
				currNode.left = find( searchedVal, currNode.left);
			else if ( localOrder > 0)
				currNode.right = find( searchedVal ,currNode.right);
			else
				throw new DuplicateItemException( searchedVal. toString() );
		}
		return currNode;
	}

	@Override
	public void insert(Object x) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void delete(Object x) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int size() {
		return size;
	}
	
}
