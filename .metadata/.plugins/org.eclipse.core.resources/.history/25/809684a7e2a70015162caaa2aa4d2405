package Bt.Tests.Core.Collections;

import java.util.*;
import java.util.Collections;

import Bt.Core.Collections.Interfaces.IGraf;
import Bt.Core.Geometry.Shapes.Shape;

public class IndirectedGraph<W,S> implements IGraf<W,S>{

	int[][] connectionMatrix;	
	Hashtable<W,S> vertices;
	
	public IndirectedGraph(int[][] aConnectionMatrix, Hashtable<W, S> aVertices) {
		connectionMatrix = aConnectionMatrix;
		vertices = aVertices;
	}

	@Override
	public List<W> wierzcholki() {
		return Collections.list(vertices.keys());
	}

	@Override
	public S krawedz(W w1, W w2) {
		return null;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<W> krawedzie(W w) {
		S reachedLvl = vertices.get(w);
		List<W> retVal = new LinkedList<>();
		

		List<W> _vertices = (List<W>) Arrays.asList(connectionMatrix[(int) reachedLvl]);
		for(Iterator<W> it = _vertices.iterator(); it.hasNext();)
		{ 
			for(Map.Entry<W, S> entry: vertices.entrySet())
			{
				if(it.equals(entry.getValue()))
				{
					retVal.add((W) entry.getValue());
				}
			}
		}
		
		return null;
	}
}
