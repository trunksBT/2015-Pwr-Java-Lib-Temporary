package bt.core.collections.dataTypes;

import java.util.Iterator;

import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.ArrayIterator;

public class ArrayListCopy implements List{
	private static final int DEFAULT_INIT_CAPACITY = 16;
	private final int initCapacity;
	private int size;
	
	private Object[] array;
	
	public ArrayListCopy( int initCapacity) {
		this.initCapacity = initCapacity;
		clear();
	}
	
	public ArrayListCopy() {
		this(DEFAULT_INIT_CAPACITY);
	}
	
	@Override
	public Iterator iterator() {
		return (Iterator) new ArrayIterator(array ,0 , size);
	}

	@Override
	public void add(Object val) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void clear() {
		size = 0;
		array = new Object[DEFAULT_INIT_CAPACITY];
	}

	@Override
	public boolean contains(Object val) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object delete(int idx) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		
		Object oldVal = array[idx];
		array[idx ] = null;
		System.arraycopy(array, idx, array, idx-1, size-- - 1 - idx);
				
		return oldVal;
	}

	private void checkOutOfBounds(int idx) {
		if( isOutOfBounds(idx))
			throw new IndexOutOfBoundsException();
	}

	private boolean isOutOfBounds(int idx) {
		return idx < 0 || idx >= size;
	}

	@Override
	public boolean delete(Object val) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object get(int idx) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int indexOf(Object val) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void insert(int idx, Object val) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public Object set(int idx, Object val) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		return size;
	}
}
