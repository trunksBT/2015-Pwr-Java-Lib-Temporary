package Bt.Tests.Core.Geometry.Elementaries;

import static org.junit.Assert.*;

import org.junit.Test;

import Bt.Core.Geometry.Elementaries.Point;

public class TestPointttt {

    public void testEqualsPointsTheSameTrue()
    {
        //arrange
        Point _pointA = new Point(2,2);
        Point _pointB = new Point(2,2);
        boolean expected = true;
        
        //act
        boolean reached = _pointA.equals(_pointB);
        
        //assert
        boolean result = !(expected ^ reached);
        assertTrue(result);
    }

    public void testEqualsPointsOtherFalse()
    {
        //arrange
    	Point _pointA = new Point(2,2);
        Point _pointB = new Point(3,3);
        boolean expected = false;
        
        //act
        boolean reached = _pointA.equals(_pointB);
        
        //assert    
        boolean result = !(expected ^ reached);
        assertTrue(result);
    }

    @Test
    public void testDistancePointsTheSameTrue()
    {
        //arrange
        Point _pointA  = new Point(2,5);        
        Point _pointB = new Point(2,5);
        double expected = 0.0;
        
        //act
        double reached = _pointA.distance(_pointB);
        
        //assert     
        boolean result = reached == expected;
        assertTrue(result);
    }

    public void testDistancePointsOthersTrue()
    {
        //arrange
        Point _pointA = new Point(2,5);        
        Point _pointB = new Point(5,9);
        double expected = 5;
        
        //act
        double reached = _pointA.distance(_pointB);
        
        //assert    
        boolean result = expected == reached;    
        assertTrue(result);
    }

    public void testDistancePointsOthersFalse()
    {
        //arrange
        Point _pointA = new Point(2,5);        
        Point _pointB = new Point(5,9);
        double expected = 3;
        
        //act
        double reached = _pointA.distance(_pointB);
        
        //assert    
        boolean result = expected != reached;      
        assertTrue(result);
    }

    public void testShiftPointsTrue()
    {
        //arrange
        Point _pointA = new Point(2,2);        
        Point _pointB = new Point(4,4);
        boolean expected = true;
        
        //act
        _pointA.shift(2, 2);
        boolean reached = _pointA.equals(_pointB);
        
        //assert
        boolean result = ! (expected ^ reached);
        assertTrue(result);
    }

    @Test
    public void testShiftPointsFalse()
    {
        //arrange
        Point _pointA = new Point(2,2);        
        Point _pointB = new Point(3,3);
        boolean expected = false;
        
        //act
        _pointA.shift(2,2);
        boolean reached = _pointA.equals(_pointB);
                
        //assert
        boolean result = !(expected ^ reached);
        assertTrue(result);
    } 

}
