package bt.algorithms.sorting;

import bt.algorithms.interfaces.Comparator;
import bt.algorithms.interfaces.ListSorter;
import bt.collections.interfaces.List;
import bt.collections.iterators.Iterator;
import bt.collections.lists.ArrayList;

public class MergeSortRec implements ListSorter {
	private final Comparator order;
	public MergeSortRec(Comparator order) {
		this.order = order;
	}
	
	@Override
	public List sort(List tape) {
		return mergeSort(tape, 0, tape.size() -1);
	}
	
	private List mergeSort(List tape, int startIdx, int endIdx) {
		if(startIdx == endIdx) {
			List result = new ArrayList();
			result.add(tape.get(startIdx));
			return result;
		}
		int splitIdx = startIdx + (endIdx-startIdx)/2;
		return merge( mergeSort( startIdx, splitIdx), mergeSort(tape, splitIdx+1, endIdx));
	}
}
