package bt.core.collections.dataTypes.trees;

import bt.core.algorithms.interfaces.Comparator;
import bt.core.collections.interfaces.Tree;

public class BST2 implements Tree {
	private final Comparator order;
	private Node2 root;
	private int size;
	
	public BST2(Comparator order) {
		this.order = order;
	}

	@Override
	public Object find(Object searchedVal) {
		Node2 copyOfRoot = search(searchedVal);
		return copyOfRoot != null ? copyOfRoot.val : null;
	}

	private Node2 search(Object searchedVal) {
		Node2 copyOfRoot = root;
		int localOrder = -1;
		while( copyOfRoot!= null && (localOrder = order.compare(searchedVal,copyOfRoot.val)) != 0)
			copyOfRoot = ( localOrder < 0 ) ? copyOfRoot.left : copyOfRoot.right;
		return copyOfRoot;
	}

	@Override
	public void insert(Object newVal) {
		root = insert( newVal, root);
		size++;
	}

	private Node2 insert(Object newVal, Node2 currNode) {
		if( currNode == null )
			currNode = new Node2( newVal);
		else {
			int localOrder = order.compare( newVal, currNode.val);
			if( localOrder < 0)
				currNode.left = insert(newVal, currNode.left);
			else if ( localOrder > 0 )
				currNode.right = insert(newVal, currNode.right);
			else
				throw new DupicateItemException(newVal.toString());
		}
		return currNode;
	}

	@Override
	public void delete(Object x) {
		// TODO Auto-generated method stub

	}

	@Override
	public int size() {
		return size;
	}

}
