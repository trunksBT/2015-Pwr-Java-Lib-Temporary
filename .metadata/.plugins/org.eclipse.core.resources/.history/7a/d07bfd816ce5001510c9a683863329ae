package bt.tests.core.collections.dataTypes;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import bt.core.collections.dataTypes.ArrayList;
import bt.core.collections.dataTypes.RatajElem;
import bt.core.collections.interfaces.List;
import junit.framework.TestCase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class TestRataList extends TestCase {
	
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_CTOR_4size_true()
    {
    	// arrange
    	RatajElem hd = new RatajElem(0, new RatajElem(1, new RatajElem(2, new RatajElem(3, null))));
    	
    	// act
    	
    	// assert
    	assertTrue(true);
    }
	
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_CTOR_null_true()
    {
    	// arrange
    	RatajElem hd = null;
    	
    	// act
    	
    	// assert
    	assertTrue(true);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_CTOR_1size_true()
    {
    	// arrange
    	RatajElem hd = new RatajElem(3,null);
    	
    	// act
    	
    	// assert
    	assertTrue(true);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_add_NotEmptyList_size2()
    {
    	// arrange
    	List tape = new ArrayList();
    	String toAdd0 = new String("0");
    	String toAdd1 =  new String("1");
    	int expSize = 2;
    	
    	// act
    	tape.add(toAdd0);
    	tape.add(toAdd1);
    	
    	
    	// assert
    	assertSame(toAdd1, tape.get(1));
    	assertEquals(tape.size(), expSize);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_add_NotEmptyList_size3()
    {
    	// arrange
    	List tape = new ArrayList();
    	String toAdd0 = new String("0");
    	String toAdd1 =  new String("1");
    	String toAdd2 =  new String("2");
    	int expSize = 3;
    	
    	// act
    	tape.add(toAdd0);
    	tape.add(toAdd1);
    	tape.add(toAdd2);
    	
    	// assert
    	assertSame(toAdd2, tape.get(2));
    	assertEquals(tape.size(), expSize);
    }
}