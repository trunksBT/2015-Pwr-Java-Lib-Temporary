package Bt.Tests.Core.Collections;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import Bt.Core.Collections.SetNatural;
import junit.framework.TestCase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class TestSetNatural extends TestCase {

    @Test
    public void testEqualsSetsTheSameTrue()
    {
        //arrange
        SetNatural _queueA = new SetNatural(21);
        SetNatural _queueB = new SetNatural(21);
        boolean expected = true;
        
        //act
        boolean reached = _queueA.equals(_queueB);
        
        //assert
        boolean result = !(expected ^ reached);
        assertTrue(result);
    }
    
    @Test
    public void testEqualsQueuesTheSameFalse()
    {
        //arrange
        SetNatural _queueA = new SetNatural(21);
        SetNatural _queueB = new SetNatural(23);
        boolean expected = false;
        
        //act
        boolean reached = _queueA.equals(_queueB);
        
        //assert
        boolean result = !(expected ^ reached);
        assertTrue(result);
    }
    
    @Test
    public void testRemoveTrue()
    {
        //arrange
        SetNatural _queueA = new SetNatural(21);
        SetNatural _queueB = new SetNatural(2);
        int element = 2;
        boolean expectLogic = true;
        boolean expectedAfter = true;
        
        //act
        boolean reachedLogic = _queueA.Remove(element);
        boolean reachedAfter = _queueA.equals(_queueB);
        
        //assert
        boolean resultLogic = !(reachedLogic ^ expectLogic);
        boolean resultAfter = !(expectedAfter ^ reachedAfter);
        assertTrue(resultLogic);
        assertTrue(resultAfter);
    }
    
    @Test
    public void testRemoveFalse1()
    {
        //arrange
        SetNatural _queueA = new SetNatural(21);
        SetNatural _queueB = new SetNatural(21);
        int element = 1;
        boolean expectLogic = true;
        boolean expectedAfter = false;
        
        //act
        boolean reachedLogic = _queueA.Remove(element);
        boolean reachedAfter = _queueA.equals(_queueB);
        
        //assert
        boolean resultLogic = !(reachedLogic ^ expectLogic);
        boolean resultAfter = !(expectedAfter ^ reachedAfter);
        assertTrue(resultLogic);
        assertTrue(resultAfter);
    }
    
    @Test
    public void testRemoveFalse2()
    {
        //arrange
        SetNatural _queueA = new SetNatural(21);
        SetNatural _queueB = new SetNatural(21);
        int element = 3;
        boolean expectLogic = false;
        boolean expectedAfter = true;
        
        //act
        boolean reachedLogic = _queueA.Remove(element);
        boolean reachedAfter = _queueA.equals(_queueB);
        
        //assert
        boolean resultLogic = !(reachedLogic ^ expectLogic);
        boolean resultAfter = !(expectedAfter ^ reachedAfter);
        assertTrue(resultLogic);
        assertTrue(resultAfter);
    }
    
    @Test
    public void testAddTrue()
    {
        //arrange
        SetNatural _queueA = new SetNatural(21);
        SetNatural _queueB = new SetNatural(214);
        int val = 4;
        boolean expectedLogic = true;
        boolean expectedAfter = true;
        
        //act
        boolean reachedLogic = _queueA.add(val);
        boolean reachedAfter = _queueA.equals(_queueB);
        
        //assert
        boolean resultLogic = !(expectedLogic ^ reachedLogic);
        boolean resultAfter = !(expectedAfter ^ reachedAfter);
        assertTrue(resultAfter);
        assertTrue(resultLogic);
    }
    
    @Test
    public void testAddFalse1()
    {
        //arrange
        SetNatural _queueA = new SetNatural(21);
        SetNatural _queueB = new SetNatural(21);
        int val = 2;
        boolean expectedLogic = false;
        boolean expectedAfter = true;
        
        //act
        boolean reachedLogic = _queueA.add(val);
        boolean reachedAfter = _queueA.equals(_queueB);
        
        //assert
        boolean resultLogic = !(expectedLogic ^ reachedLogic);
        boolean resultAfter = !(expectedAfter ^ reachedAfter);
        assertTrue(resultAfter);
        assertTrue(resultLogic);
    } 
}
