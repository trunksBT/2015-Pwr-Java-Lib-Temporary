package bt.core.collections.dataTypes.trees;

import bt.core.algorithms.interfaces.Comparator;
import bt.core.collections.interfaces.Tree;

public class BST implements Tree {
	private final Comparator order;
	private Node root;
	private int size;
	
	public BST(Comparator order) {
		this.order = order;
		root = null;
	}

	@Override
	public Object find(Object searchedVal) {
		Node refToNode = search(searchedVal);
		return refToNode != null ? refToNode.val : null;
	}

	private Node search(Object searchedVal) {
		Node currNode = root;
		int localOrder = 0;
		while( currNode != null && (localOrder = order.compare(searchedVal,currNode.val))!= 0)
			currNode = localOrder < 0 ? currNode.left : currNode.right;
		return currNode;
	}

	@Override
	public void insert(Object insertedVal) {
		root = insert(insertedVal,root);
	}

	private Node insert(Object insertedVal, Node currNode) {
		if(currNode == null)
			currNode = new Node(insertedVal);
		else {
			int localOrder = order.compare(insertedVal,currNode.val);
			if(localOrder<0)
				currNode.left = insert(insertedVal, currNode.left);
		}
		return currNode;
	}

	@Override
	public void delete(Object searchedVal) {
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((order == null) ? 0 : order.hashCode());
		result = prime * result + ((root == null) ? 0 : root.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BST other = (BST) obj;
		if (order == null) {
			if (other.order != null)
				return false;
		} else if (!order.equals(other.order))
			return false;
		if (root == null) {
			if (other.root != null)
				return false;
		} else if (!root.equals(other.root))
			return false;
		return true;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}
}
