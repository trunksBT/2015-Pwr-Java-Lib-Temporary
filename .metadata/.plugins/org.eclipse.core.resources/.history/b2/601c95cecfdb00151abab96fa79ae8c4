package bt.core.collections.dataTypes;

import java.util.Iterator;
import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.ArrayIterator;

public class ArrayListCopy implements List{
	private final static int DEFAULT_INIT_CAPACITY = 16;
	private final int initCapacity;
	private Object[] array;
	private int size;
	
	public ArrayListCopy() {
		this(DEFAULT_INIT_CAPACITY);
	}
	
	public ArrayListCopy(int initCapacity) {
		this.initCapacity = initCapacity;
		clear();
	}

	@SuppressWarnings("rawtypes")
	@Override
	public Iterator iterator() {
		return (Iterator) new ArrayIterator(array);
	}

	@Override
	public void add(Object val) {
		insert(size,val);
	}

	@Override
	public void clear() {
		array = new Object[initCapacity];
		size = 0;
	}

	@Override
	public boolean contains(Object val) {
		return indexOf(val) != -1;
	}

	@Override
	public Object delete(int idx) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		
		Object oldVal = array[idx];
		System.arraycopy(array, idx+1, array, idx, size - idx);
		
		return oldVal;
	}

	@Override
	public boolean delete(Object val) {
		int idxOfSearched = indexOf(val);
		boolean retVal = false;
		
		if( idxOfSearched != -1 ) {
			delete(idxOfSearched);
			retVal = true;
		}
		
		return retVal;
	}

	@Override
	public Object get(int idx) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		return array[idx];
	}

	@Override
	public int indexOf(Object val) {
		int idxOfSearch = -1;
		
		for(int i = 0 ; i< size && idxOfSearch == -1 ; i++)
			if( retIdx == -1 && array[i].equals(val) )
				idxOfSearch = i;
			
		return idxOfSearch;
	}

	@Override
	public void insert(int idx, Object val) throws IndexOutOfBoundsException {
		if( isOutOfBoundForInsert(idx) )
			throw new IndexOutOfBoundsException();
		ensureCapacity(size+1);
		
		System.arraycopy(array,idx,array,idx+1,size-idx);
		array[idx] = val;
		size++;
	}

	public void ensureCapacity(int capacity) {
		if( initCapacity <= capacity) {
			Object newArray[] = new Object[capacity + capacity/2];
			System.arraycopy(array, 0, newArray, 0, size-1);
			array = newArray;
		}	
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public Object set(int idx, Object val) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		
		Object oldVal = array[idx];
		array[idx] = val;
		
		return oldVal;
	}

	@Override
	public int size() {
		return size;
	}

	private void checkOutOfBounds(int idx) {
		if( isOutOfBound(idx) )
			throw new IndexOutOfBoundsException();
	}

	private boolean isOutOfBound(int idx) {
		return idx < 0 | idx >= size;
	}
	
	private boolean isOutOfBoundForInsert(int idx) {
		return idx < 0 | idx > size;
	}
	
}
