package Bt.Tests.Core.Collections;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import Bt.Core.ABC.OneDimTable;
import Bt.Core.Collections.SetNatural;
import junit.framework.TestCase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class TestOneDimTableNatural_Imperative extends TestCase {

	public int[] insert(int []tab ,int el)
	{
		// init
		int goodIdx = -1;
		int i = 1;
		int j = 0;
		int size = tab.length;

		int [] helpTape = new int [size+1];
		
		// run
		if( size > 1) {
			while( goodIdx == -1 && i <= size)
			{
				int atI_1 = tab[i-1];
				int atI = tab[i];
				
				boolean zero = atI_1 >= el;
				boolean first = atI_1 <= el ;
				boolean second = atI >= el ;
				boolean third = atI <= el;
		
				if (zero && (i == 1))
					goodIdx = 0;
				
				if ( first && second )
					goodIdx = i;
				
				if ( third && (i == size -1))
					goodIdx = i+1;
//				else if( tab[i] <= el )
//					goodIdx = i;					
	
				i++;
			}
		}
		else if ( size == 1) {
			if ( tab [0] <= el )
				goodIdx = 1;
			else
				goodIdx = 0;
		}
		else
			goodIdx = 0;
		
		i = j = 0;
		
		while(i<=size) {
			if ( i == goodIdx )
				helpTape[i++] = el;
			else
				helpTape[i++]= tab[j++];
		}
			
		// cc
		return helpTape;
	}
	
	public boolean equals(int[] fstTab, int[] sndTab)
	{
		boolean result = true;
		
		result&= fstTab.length == sndTab.length;
		
		if(result) {
			for (int i = 0; i < fstTab.length; i++)
				result &= fstTab[i] == sndTab[i];
		}
		
		return result;
	}
	
	@Test
	public void test_ASig_Method_TableState_NewElRelation()
	{
	    assertTrue(true);
	}
	
  @Test
  public void test_Equal_TheSame()
  {
      //arrange
	  int[] inTable = {1,2,3,4,5,6};
	  int[] inTable2 = {1,2,3,4,5,6};
      boolean expected = true;
      
      //act
      boolean reached = equals(inTable,inTable2);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_Internal()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};  
	  int[] expectTable = {1,2,3,4,5,6};
	  
	  int el = 4;
      boolean expected = true;
    
      //act
      int[] _outTape = insert(inTable,el);
      boolean reached = equals(expectTable,_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_NewLeftLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {0,1,2,3,5,6};
	  int expectSize = 6;
	  
	  int el = 0;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_EqualToLeftLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,1,2,3,5,6};
	  int expectSize = 6;
	  
	  int el = 1;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_EqualToSecond()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,2,3,5,6};
	  int expectSize = 6;
	  
	  int el = 2;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_Latter()
  {
      //arrange
	  int[] inTable = {1,3,4,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,4,5,6};
	  int expectSize = 6;
	  
	  int el = 2;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_LastButOne()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,5,5,6};
	  int expectSize = 6;
	  
	  int el = 5;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_NewRightLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,5,6,7};
	  int expectSize = 6;
	  
	  int el = 7;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Filled_EqualToRightLimit()
  {
      //arrange
	  int[] inTable = {1,2,3,5,6};
	  int inSize = 5;
	  
	  int[] expectTable = {1,2,3,5,6,6};
	  int expectSize = 6;
	  
	  int el = 6;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expectSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Empty()
  {
      //arrange
	  int[] inTable = {};
	  int inSize = 0;

	  int[] expectTable = {4};
	  int expSize = 1;
	  int el = 4;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Single_Lower()
  {
      //arrange
	  int[] inTable = {6};
	  int inSize = 1;

	  int[] expectTable = {4,6};
	  int expSize = 2;
	  int el = 4;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expSize,expectTable);  
      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Single_Higher()
  {
      //arrange
	  int[] inTable = {6};
	  int inSize = 1;

	  int[] expectTable = {6,8};
	  int expSize = 2;
	  int el = 8;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
  
  @Test
  public void test_Insert_Single_Equal()
  {
      //arrange
	  int[] inTable = {6};
	  int inSize = 1;

	  int[] expectTable = {6,6};
	  int expSize = 2;
	  int el = 6;
      boolean expected = true;
	  	  
      OneDimTable _inTape = new OneDimTable(inSize,inTable);  
      OneDimTable _expectedTape = new OneDimTable(expSize,expectTable);  

      
      //act
      OneDimTable _outTape = _inTape.insert(el);
      boolean reached = _expectedTape.equals(_outTape);
      
      //assert
      boolean result = !(expected ^ reached);
      assertTrue(result);
  }
}
