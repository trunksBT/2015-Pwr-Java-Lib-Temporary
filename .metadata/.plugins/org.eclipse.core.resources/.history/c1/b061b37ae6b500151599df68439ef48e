package bt.core.collections;

import java.util.*;

import bt.core.collections.interfaces.IGraf;

public class IndirectedGraph<W,S> implements IGraf<W,S>{
	S[][] matrix;	
	Hashtable<W,Integer> vertIntoPosition;
	ArrayList<W> vertices;

	public IndirectedGraph(Hashtable<W, Integer> aNodes,S[][] aConnectionMatrix) {
		vertIntoPosition = aNodes;
		matrix = aConnectionMatrix;
	}
	
	public IndirectedGraph(ArrayList<W> aVertices,S[][] aConnectionMatrix,boolean aFlag) {
		vertices = aVertices;	
		matrix = aConnectionMatrix;	
		vertIntoPosition = new Hashtable<> ();

		if(aVertices!= null)
			for(int i = 0 ; i < aVertices.size();i++)
				vertIntoPosition.put(aVertices.get(i), i);
		
	}

	@Override
	public List<W> Wierzcholki() {
		List<W> retVal = new ArrayList<W>();
				
		if(vertices != null)		
			retVal = vertices;
		
		return retVal;
	}
	
	@Override
	public S Krawedz(W aW1, W aW2) {
		S retVal = null;
		
		if(!(aW1 == null || aW2 == null))
			retVal = matrix[vertIntoPosition.get(aW1)][vertIntoPosition.get(aW2)];
		
		return retVal;
	}

	@Override
	public List<W> Krawedzie(W aW) {
		List<W> retVal = new LinkedList<>();
		
		if(aW!=null && vertIntoPosition!=null && matrix!= null && vertIntoPosition.getOrDefault(aW, null) != null)
		{						
				int idxOfLvl = vertIntoPosition.get(aW);
				
				for(int i = 0 ; i < vertices.size();i++)
					if(matrix[idxOfLvl][i]!= null)
						retVal.add(vertices.get(i));
		}
		
		return retVal;
	}
}
