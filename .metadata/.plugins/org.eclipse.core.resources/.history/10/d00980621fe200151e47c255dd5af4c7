package bt.core.collections.dataTypes;

import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.Iterator;

public class GuardedLinkedListDoubleCopy extends AbstractList implements List {
	Element hdAndTl = new Element(null);
	private int size;
	@Override
	public Iterator iterator() {
		return null;
	}

	@Override
	public void add(Object val) {
		insert(size,val);
	}

	@Override
	public void clear() {
		hdAndTl.prev = hdAndTl;
		hdAndTl.next = hdAndTl;
	}

	@Override
	public boolean contains(Object val) {
		return indexOf(val) != 0;
	}

	@Override
	public Object delete(int idx) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean delete(Object val) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object get(int idx) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		return getElement(idx).val;
	}
	
	private void checkOutOfBounds(int idx) {
		if( isOutOfBounds(idx) )
			throw new IndexOutOfBoundsException();
	}

	private boolean isOutOfBounds(int idx) {
		return idx < 0 || idx >= size;
	}

	public Element getElement(int idx) {
		return idx > size / 2 ?
				getElementForwards(idx) :
					getElementBackwards(idx);
	}

	private Element getElementBackwards(int idx) {
		Element cur = hdAndTl;
		
		for(int i = 0 ; i < size - idx ; i ++)
			cur = cur.prev;
		
		return cur;
	}

	private Element getElementForwards(int idx) {
		Element cur = hdAndTl;
		
		for(int i = 0 ; i< idx + 1; i++)
			cur = cur.next;
		
		return cur;
	}

	@Override
	public int indexOf(Object val) {
		return 0;
	}

	@Override
	public void insert(int idx, Object val) throws IndexOutOfBoundsException {

	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public Object set(int idx, Object val) throws IndexOutOfBoundsException {
		Element elAtIdx = getElement(idx);
		Object oldVal = elAtIdx.val;
		
		elAtIdx.val = val;
		return oldVal;
	}

	@Override
	public int size() {
		return size;
	}
}
