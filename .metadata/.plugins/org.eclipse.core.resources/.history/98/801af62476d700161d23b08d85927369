package bt.collections.graphs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import bt.algorithms.interfaces.IGrafC07;
import bt.algorithms.interfaces.IKrawedz;

public class GrafNieskierowany<W,S> implements IGrafC07<W, S> {
	private Hashtable<W, List<W>> listaSasiedztwa_;
	
	public GrafNieskierowany(
			List<IKrawedz<W, S>> krawedzie,
			List<W> wierzcholki)
	{
		if(!krawedzieZawierajaPoprawneWierzcholki(krawedzie, wierzcholki))
		{
			throw new EdgeContainsWrongVerticeException();
		}
		listaSasiedztwa_ = wypelnijListeSasiedztwaKluczami(wierzcholki);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public boolean krawedzieZawierajaPoprawneWierzcholki(
			List<IKrawedz<W, S>> krawedzie, List<W> wierzcholki)
	{
		boolean czyOk = true;
		
		for(Iterator it = krawedzie.iterator(); it.hasNext(); ) {
			IKrawedz<W, S> curr = (IKrawedz<W, S>) it.next();
			if(curr== null ||
					curr.w1() == null || curr.w2() == null || curr.wart() == null)
			{
				return false;
			}
			czyOk &= wierzcholki.containsAll(
					Arrays.asList(curr.w1(),curr.w2()));
		}
		return czyOk;
	}
	
	public Hashtable<W, List<W>> wypelnijListSasiedztwa(
			List<IKrawedz<W, S>> krawedzie,
			List<W> wierzcholki) {
		Hashtable<W, List<W>> listaSasiedztwa = new Hashtable<>();
		
		listaSasiedztwa = wypelnijListeSasiedztwaKluczami(wierzcholki);
		listaSasiedztwa = dodajSasiadowDoWierzcholkow(
				krawedzie, listaSasiedztwa);
		
		return null;
	}
	
	public Hashtable<W, List<W>> wypelnijListeSasiedztwaKluczami(
			List<W> wierzcholki) {		
		if(wierzcholki == null)
		{
			return new Hashtable<>();
		}
		Hashtable<W, List<W>> listaSasiedztwa = new Hashtable<>();
		
		for(Iterator it = wierzcholki.iterator(); it.hasNext();) {
			W curr = (W) it.next(); 
			listaSasiedztwa.put(curr, new LinkedList<W>());
		}
		
		return listaSasiedztwa;
	}
	
	public Hashtable<W, List<W>> dodajSasiadowDoWierzcholkow(
			List<IKrawedz<W, S>> krawedzie,
			Hashtable<W, List<W>> listaSasiedztwa) {
		
		for(Iterator it = krawedzie.iterator(); it.hasNext(); ) {
			IKrawedz<W, S> curr = (IKrawedz<W, S>) it.next();
			if(curr== null)
			{
				return null;
			}
			if(curr.w1() == null || curr.w2() == null || curr.wart() == null)
			{
				return null;
			}
			
//			listaSasiedztwa
			
		}
		
		return null;
	}
	
	@Override
	public List<W> wierzcholki() {
		return null;
	}

	@Override
	public List<IKrawedz<W, S>> krawedzie() {
		return null;
	}

	@Override
	public List<IKrawedz<W, S>> krawedzie(W w) {
//		List<IKrawedz<W, S>> retVal = new ArrayList<>();
//		
//		for(Iterator it = krawedzie_.iterator(); it.hasNext(); ) {
//			IKrawedz<W, S> curr = (IKrawedz<W, S>) it.next();
//			if(curr== null)
//			{
//				return null;
//			}
//			if(curr.w1() == null || curr.w2() == null || curr.wart() == null)
//			{
//				return null;
//			}
//			if(curr.w1() == w || curr.w2() == w)
//			{
//				retVal.add(curr);
//			}
//		}
		return null;
	}

	@Override
	public S czyKrawedz(W w1, W w2) {
//		boolean czyIstniejaKrawedzie =
//				wierzcholki_.contains(w1) && wierzcholki_.contains(w2) ;
//		
//		if( !czyIstniejaKrawedzie )
//		{
//			return null;
//		}
//		
//		for(Iterator it = krawedzie_.iterator(); it.hasNext(); ) {
//			IKrawedz<W, S> curr = (IKrawedz<W, S>) it.next();
//			if(curr== null)
//			{
//				return null;
//			}
//			if(curr.w1() == w1 && curr.w2() == w2
//					|| curr.w2() == w1 && curr.w1() == w2)
//			{
//				return curr.wart();
//			}
//		}
//		
		return null;
	}

}
