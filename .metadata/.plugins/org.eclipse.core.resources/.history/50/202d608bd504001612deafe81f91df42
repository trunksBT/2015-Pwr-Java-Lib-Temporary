package bt.core.algorithms.sorting;

import bt.core.algorithms.interfaces.Comparator;
import bt.core.algorithms.interfaces.ListSorter;
import bt.core.collections.dataTypes.ArrayList;
import bt.core.collections.dataTypes.Queue;
import bt.core.collections.interfaces.IQueue;
import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.Iterator;

public class MergeSortIter2 implements ListSorter {
	private final Comparator order;
	public MergeSortIter2(Comparator order) {
		this.order = order;
	}
	@Override
	public List sort(List tape) {
		return mergeLists(createQueue(tape));
	}
	private Queue createQueue(List tape) {
		Iterator it = tape.iterator();
		IQueue retVal = new Queue();
		it.first();
		while(!it.isDone()) {
			ArrayList singleton = new ArrayList(1);
			singleton.add(it.current());
			retVal.enqueue(singleton);
			it.next();
		}
		return retVal;
	}
}
