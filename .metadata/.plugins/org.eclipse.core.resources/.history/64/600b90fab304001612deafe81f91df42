package bt.core.algorithms.sorting;

import bt.core.algorithms.interfaces.Comparator;
import bt.core.algorithms.interfaces.ListSorter;
import bt.core.collections.dataTypes.ArrayList;
import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.Iterator;

public class MergeSortRec2 implements ListSorter {
	private final Comparator order;
	public MergeSortRec2(Comparator order) {
		this.order = order;
	}
	
	@Override
	public List sort(List tape) {
		return mergeSort(tape, 0, tape.size() -1);
	}

	private List mergeSort(List tape, int startIdx, int endIdx) {
		if( startIdx == endIdx ) {
			List result = new ArrayList();
			result.add(tape.get(startIdx));
			return result;
		}
		int splitIdx = startIdx + (endIdx - startIdx) /2;
		return merge(mergeSort(tape, startIdx, splitIdx),
				mergeSort(tape, splitIdx +1, endIdx));
	}

	private List merge(List leftArray, List rightArray) {
		ArrayList retVal = new ArrayList();
		Iterator lIt = leftArray.iterator();
		Iterator rIt = rightArray.iterator();
		lIt.first();
		rIt.first();
		while(!lIt.isDone() && !rIt.isDone()) {
			if(order.compare(lIt.current(),rIt.current())<0) {
				retVal.add(lIt.current());
				lIt.next();
			}else {
				retVal.add(rIt.current());
				rIt.next();
			}
		}
		while(!lIt.isDone()) {
			retVal.add(lIt.current());
			lIt.next();
		}
		while(!rIt.isDone()) {
			retVal.add(rIt.current());
			rIt.next();
		}
		return retVal;
		
	}
}










