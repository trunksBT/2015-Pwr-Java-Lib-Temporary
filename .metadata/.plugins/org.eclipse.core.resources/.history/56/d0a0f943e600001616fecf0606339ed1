package bt.core.collections.dataTypes.trees;

import bt.core.algorithms.interfaces.Comparator;
import bt.core.collections.interfaces.Tree;
import bt.core.exceptions.DuplicateItemException;
import bt.core.exceptions.ItemNotFoundException;

public class BST2 implements Tree {
	private final Comparator order;
	private int size;
	private Node2 root;
	
	public BST2(Comparator order) {
		this.order = order;
		size = 0;
		root = null;
	}

	@Override
	public Object find(Object searchedVal) {
		Node2 refToRoot = root;
		refToRoot = search( searchedVal, root);
		return refToRoot;
	}

	private Node2 search(Object searchedVal, Node2 currNode) {
		if( currNode == null )
			return null;
		else {
			int localOrder = order.compare(searchedVal, currNode.val);
			if( localOrder < 0 )
				currNode = search(searchedVal, currNode.left);
			else if( localOrder > 0 )
				currNode = search(searchedVal, currNode.right);
			else
				currNode = currNode;
		}
		return currNode;
	}

	@Override
	public void insert(Object insertedVal) {
		root = insert(insertedVal, root);
		size++;
	}
	
	private Node2 insert(Object insertedVal, Node2 currNode) {
		if ( currNode != null )
			System.out.println("Curr" + currNode.val);
		else
			System.out.println("Curr null");
		
		if( currNode == null )
			currNode = new Node2(insertedVal);
		else {
			int localOrder  = order.compare(insertedVal, currNode.val);
			if( localOrder < 0)
				insert(insertedVal, currNode.left);
			else if ( localOrder > 0) {
				insert(insertedVal, currNode.right);
			}
		}
		return currNode;
	}

	@Override
	public void delete(Object searchedVal) {
		root = delete( searchedVal, root);
	}

	private Node2 delete(Object searchedVal, Node2 currNode) {
		if( currNode == null )
			throw new ItemNotFoundException(searchedVal.toString());
		else {
			int localOrder = order.compare(searchedVal, currNode.val);
			if( localOrder < 0)
				currNode = delete(searchedVal, currNode.left);
			else if ( localOrder > 0 )
				currNode = delete(searchedVal, currNode.right);
			else if ( currNode.left != null && currNode.right != null) {
				currNode = detachMin(currNode.right, currNode);
			}
			else
				currNode = currNode.right;
		}
		return currNode;
	}

	private Node2 detachMin(Node2 right, Node2 currNode) {
		if( currNode == null )
			currNode = currNode.right;
		else {
			
		}
		return currNode;
	}

	@Override
	public int size() {
		return size;
	}
//
//	@Override
//	public int hashCode() {
//		final int prime = 31;
//		int result = 1;
//		result = prime * result + ((root == null) ? 0 : root.hashCode());
//		return result;
//	}
//
//	@Override
//	public boolean equals(Object obj) {
//		if (this == obj)
//			return true;
//		if (obj == null)
//			return false;
//		if (getClass() != obj.getClass())
//			return false;
//		BST2 other = (BST2) obj;
//		if (root == null) {
//			if (other.root != null)
//				return false;
//		} else if (!root.equals(other.root))
//			return false;
//		return true;
//	}
}
