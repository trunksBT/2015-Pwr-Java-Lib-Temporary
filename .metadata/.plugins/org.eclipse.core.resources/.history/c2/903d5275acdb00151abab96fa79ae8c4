package bt.tests.core.collections.dataTypes;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import bt.core.collections.dataTypes.ArrayList;
import bt.core.collections.interfaces.List;
import junit.framework.TestCase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class TestArrayList extends TestCase {
	
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_CTOR_emptyList_size0()
    {
    	// arrange
    	List tape = new ArrayList();
    	int expSize = 0;
    	
    	// act
    	
    	// assert
    	assertEquals(tape.size(), expSize);
    }
	
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_add_emptyList_size1()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer addedVal = new Integer(0);
    	int expSize = 1;
    	
    	// act
    	tape.add(addedVal);
    	
    	// assert
    	assertSame(addedVal, tape.get(0));
    	assertEquals(tape.size(), expSize);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_add_NotEmptyList_size2()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer addedVal = new Integer(0);
    	int expSize = 2;
    	
    	// act
    	tape.add(new Integer(1));
    	tape.add(addedVal);
    	
    	// assert
    	assertSame(addedVal, tape.get(1));
    	assertEquals(tape.size(), expSize);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_add_NotEmptyList_size3()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer addedVal = new Integer(0);
    	int expSize = 3;
    	
    	// act
    	tape.add(new Integer(1));
    	tape.add(new Integer(2));
    	tape.add(addedVal);
    	
    	// assert
    	assertSame(addedVal, tape.get(2));
    	assertEquals(tape.size(), expSize);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_clear_notEmpty_size0()
    {
    	// arrange
    	List tape = new ArrayList();
    	int expSize = 0;
    	
    	// act
    	tape.add(new Integer(1));
    	tape.add(new Integer(2));
    	tape.clear();
    	
    	// assert
    	assertEquals(tape.size(), expSize);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_clear_empty_size0()
    {
    	// arrange
    	List tape = new ArrayList();
    	int expSize = 0;
    	
    	// act
    	tape.clear();
    	
    	// assert
    	assertEquals(tape.size(), expSize);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_contains_empty_false()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer searchedVal = new Integer(0);
    	boolean rcVal = false;
    	
    	// act
    	rcVal = tape.contains(searchedVal);
    	
    	// assert
    	assertFalse(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_contains_notEmpty_false()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer searchedVal = new Integer(0);
    	boolean rcVal = false;
    	
    	// act
    	tape.add(new Integer(1));
    	tape.add(new Integer(2));
    	tape.add(new Integer(3));
    	rcVal = tape.contains(searchedVal);
    	
    	// assert
    	assertFalse(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_contains_notEmpty_true()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer searchedVal = new Integer(0);
    	boolean rcVal = false;
    	
    	// act
    	tape.add(new Integer(0));
    	tape.add(new Integer(1));
    	tape.add(new Integer(2));
    	rcVal = tape.contains(searchedVal);
    	
    	// assert
    	assertTrue(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_delete_byIdx_empty_false()
    {
    	// arrange
    	List tape = new ArrayList();
    	int searchedIdx = 0;
    	boolean rcVal = true;
    	
    	// act
    	try{
    		tape.delete(searchedIdx);
    	}catch(IndexOutOfBoundsException e) {
    		rcVal = false;
    	}
    	
    	// assert
    	assertFalse(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_delete_byIdx_notEmpty_false()
    {
    	// arrange
    	List tape = new ArrayList();
    	int searchedIdx = 1;
    	boolean rcVal = true;
    	
    	// act
    	tape.add(new Integer(0));
    	
    	try{
    		tape.delete(searchedIdx);
    	}catch(IndexOutOfBoundsException e) {
    		rcVal = false;
    	}
    	
    	// assert
    	assertFalse(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_delete_byIdx_notEmpty_true()
    {
    	// arrange
    	List tape = new ArrayList();
    	int searchedIdx = 0;
    	boolean rcVal = true;
    	
    	// act
    	tape.add(new Integer(0));
    	
    	try{
    		tape.delete(searchedIdx);
    	}catch(IndexOutOfBoundsException e) {
    		rcVal = false;
    	}
    	
    	// assert
    	assertTrue(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_delete_byVal_empty_false()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer searchedVal = new Integer(0);
    	boolean rcVal = true;
    	
    	// act
    	rcVal = tape.delete(searchedVal);
    	
    	// assert
    	assertFalse(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_delete_byVal_notEmpty_false()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer searchedVal = new Integer(1);
    	boolean rcVal = true;
    	
    	// act
    	tape.add(new Integer(0));
    	rcVal = tape.delete(searchedVal);
    	
    	// assert
    	assertFalse(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_delete_byVal_notEmpty_true()
    {
    	// arrange
    	List tape = new ArrayList();
    	Integer searchedVal = new Integer(1);
    	boolean rcVal = true;
    	
    	// act
    	tape.add(new Integer(0));
    	tape.add(new Integer(1));
    	tape.add(new Integer(1));
    	
    	rcVal = tape.delete(searchedVal);
    	
    	// assert
    	assertTrue(rcVal);
    	assertEquals(tape.get(1),searchedVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_get_empty_false()
    {
    	// arrange
    	List tape = new ArrayList();
    	Object rcVal = null;
    	Integer expVal =  new Integer(0);
    	int searchedIdx = 0;
    	
    	// act
    	try {
    		rcVal = tape.get(searchedIdx);
    	}catch(IndexOutOfBoundsException e)
    	{
    		
    	}
    	
    	// assert
    	assertNull(rcVal);
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_indexOf()
    {
    	// arrange
    	List tape = new ArrayList();
    	
    	// act
    	// assert
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_insert()
    {
    	// arrange
    	List tape = new ArrayList();
    	
    	// act
    	// assert
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_isEmpty()
    {
    	// arrange
    	List tape = new ArrayList();
    	
    	// act
    	// assert
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_set()
    {
    	// arrange
    	List tape = new ArrayList();
    	
    	// act
    	// assert
    }
    
	//Test_MethodName_StateUnderTest_Expect_ExpectedBehavior
    @Test
    public void test_size()
    {
    	// arrange
    	List tape = new ArrayList();
    	
    	// act
    	// assert
    }
}
