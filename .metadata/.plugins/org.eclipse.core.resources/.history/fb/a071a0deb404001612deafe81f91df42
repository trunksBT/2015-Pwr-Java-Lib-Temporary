package bt.core.algorithms.sorting;

import bt.core.algorithms.interfaces.Comparator;
import bt.core.algorithms.interfaces.ListSorter;
import bt.core.collections.dataTypes.ArrayList;
import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.Iterator;

public class MergeSortRec2 implements ListSorter {
	private final Comparator order;
	public MergeSortRec2(Comparator order) {
		this.order = order;
	}
	@Override
	public List sort(List tape) {
		return mergeSort(0, tape.size()-1, tape);
	}
	private List mergeSort(int startIdx, int endIdx, List tape) {
		if( startIdx == endIdx ) {
			ArrayList retVal = new ArrayList();
			retVal.add(tape.get(startIdx));
			return retVal;
		}
		int splitIdx = startIdx + (endIdx + startIdx)/2;
		return merge(mergeSort(0,splitIdx, tape),
				mergeSort(splitIdx+1, tape.size()-1,tape);
	}
}









