package bt.algorithms.sorting;

import bt.algorithms.interfaces.Comparator;
import bt.algorithms.interfaces.ListSorter;
import bt.collections.interfaces.List;

public class QuickSort implements ListSorter{
	private final Comparator order;
	
	public QuickSort(Comparator order) {
		this.order = order;
	}

	public List sort(List tape) {
		if(tape == null)
			return null;

		quickSort(tape, 0, tape.size() -1);
		return tape;
	}
	
	private void quickSort(List tape, int idxStart, int idxEnd) {
		if( idxEnd > idxStart ) {
			int idxSplit = partition(tape, idxStart, idxEnd);
			quickSort(tape, idxStart, idxSplit-1);
			quickSort(tape, idxSplit + 1, idxEnd);
		}
	}
	
	private int partition(List tape, int idxLeft, int idxRight) {
		Object pivot = tape.get(idxRight);
		int idxHigherOfPivot = idxLeft -1;
		int idxLowerOfPivot = idxRight;
		while( idxHigherOfPivot< idxLowerOfPivot) {
			while( order.compare(tape.get( ++idxHigherOfPivot), pivot) < 0);
			while( idxLowerOfPivot>idxLeft &&
					order.compare(tape.get( --idxLowerOfPivot), pivot) > 0);
			if(idxHigherOfPivot < idxLowerOfPivot)
				swap(tape, idxHigherOfPivot, idxLowerOfPivot);
		}
		swap(tape, idxHigherOfPivot, idxRight);
		return idxHigherOfPivot;
	}
	
	private void swap( List tape, int idxLeft, int idxRight) {
		if(idxLeft != idxRight) {
			Object oldLeft = tape.get(idxLeft);
			tape.set(idxLeft, tape.get(idxRight));
			tape.set(idxRight, oldLeft);
		}
	}
}
