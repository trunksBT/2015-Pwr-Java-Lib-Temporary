package bt.algorithms.sorting;

import bt.algorithms.interfaces.Comparator;
import bt.algorithms.interfaces.ListSorter;
import bt.collections.interfaces.List;

public class QuickSort implements ListSorter{
	private final Comparator order;
	
	public QuickSort(Comparator order) {
		this.order = order;
	}

	public List sort(List tape) {
		if(tape == null)
			return null;

		quickSort(tape, 0, tape.size() -1);
		return tape;
	}
	
	private void quickSort(List tape, int idxStart, int idxEnd) {
		if( idxEnd > idxStart ) {
			int idxSplit = partition(tape, idxStart, idxEnd);
			quickSort(tape, idxStart, idxSplit-1);
			quickSort(tape, idxSplit + 1, idxEnd);
		}
	}
	
	private int partition(List tape, int idxStart, int idxEnd) {
		Object pivot = tape.get(idxEnd);
		int idxHigherThanPivot = idxStart -1;
		int idxLowerThanPivot = idxEnd;
		while( idxHigherThanPivot< idxLowerThanPivot) {
			while( order.compare(tape.get( ++idxHigherThanPivot), pivot) < 0);
			while( idxLowerThanPivot>idxStart &&
					order.compare(tape.get( --idxLowerThanPivot), pivot) > 0);
			if(idxHigherThanPivot < idxLowerThanPivot)
				swap(tape, idxHigherThanPivot, idxLowerThanPivot);
		}
		swap(tape, idxHigherThanPivot, idxEnd);
		return idxHigherThanPivot;
	}
	
	private void swap( List tape, int idxLeft, int idxRight) {
		if(idxLeft != idxRight) {
			Object oldLeft = tape.get(idxLeft);
			tape.set(idxLeft, tape.get(idxRight));
			tape.set(idxRight, oldLeft);
		}
	}
}
