package bt.core.collections.dataTypes;

import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.Iterator;

public class GuardedLinkedListDouble implements List {
	private final Element hdAndTl = new Element(null);
	
	@Override
	public Iterator iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void add(Object val) {
		// TODO Auto-generated method stub

	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean contains(Object val) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object delete(int idx) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean delete(Object val) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object get(int idx) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int indexOf(Object val) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void insert(int idx, Object val) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object set(int idx, Object val) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	private final class Element {
		private Object val;
		private Element prev;
		private Element next;
		
		public Element(Object val) {
			this.val = val;
		}
		
		public void setValue(Object val) {
			this.val = val;
		}
		
		public Object getValue() {
			return val;
		}
		
		public void setPrevious(Element el) {
			prev = el;
		}
		
		public Object getPrevious() {
			return prev;
		}
		
		public void setNext(Element el) {
			next = el;
		}
		
		public Object getNext() {
			return next;
		}
		
		public void attachBefore(Element next) {
			Element newPrev = next.prev;
			this.next = next;
			this.prev= newPrev;
			next.prev = this;
			prev.setNext(this);
		}
		
		public void detach() {
			prev.next = next;
			next.prev = prev;
		}
	}
}
