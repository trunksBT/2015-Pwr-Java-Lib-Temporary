package Bt.Core.Algorithms;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.stream.Collectors;

import Bt.Core.Collections.IndirectedGraph;

public class GraphAlgos< W,S> {
	
	IndirectedGraph<String extends W,Double> _graf;
	
	public GraphAlgos(IndirectedGraph<String,Double> aGraf)
	{
		_graf = aGraf;
	}
	
	public List<S> dijkstra(String aStart,String aEnd){
		HashMap<String,LinkedList<Double>> _mapOfStackTrace = init(_graf);
		_mapOfStackTrace.get("Dania").add(_graf.krawedz("Anglia", "Czechy"));
		
		
		return null;	
	}
	
	private HashMap<String,LinkedList<Double>> init(
			IndirectedGraph<String,Double> aGraf)
	{				
		return (HashMap<String, LinkedList<Double>>) aGraf.wierzcholki()
				.stream()
				.collect(Collectors.toMap(
						vert-> vert,
						vert-> new LinkedList<Double>()));
	}
}
