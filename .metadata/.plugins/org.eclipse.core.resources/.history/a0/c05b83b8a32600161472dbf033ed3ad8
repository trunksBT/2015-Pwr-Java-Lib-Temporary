package bt.algorithms.graph;

import bt.collections.graphs.Graph;
import bt.collections.interfaces.List;
import bt.collections.iterators.Iterator;
import bt.collections.lists.ArrayList;
import bt.collections.lists.DirtyListDecorator;

public class DFS2<String> {
	private int startVert = 0;
	public List forAdjacentShapes(Graph<Integer,String> graph) {
		graph.resetVerticesStory();
		List retVal = new ArrayList(graph.getNumberOfVerts());
		retVal.add(startVert);
		DirtyListDecorator adjacents = (DirtyListDecorator) graph.getAdjacents(startVert);
		Iterator it = adjacents.iterator();
		for( it.first(); !it.isDone() ; it.last()) {
			if(!adjacents.isDirty())
				forAdjacentShapes()
		}	
		
		return null;
	}

}
