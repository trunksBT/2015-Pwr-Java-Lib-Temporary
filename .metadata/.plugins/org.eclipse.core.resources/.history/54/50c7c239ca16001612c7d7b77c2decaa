package bt.core.collections.graphs;

import bt.core.collections.interfaces.List;
import bt.core.collections.lists.ArrayList;
import bt.core.collections.lists.DirtyListDecorator;
import bt.core.collections.lists.LinkedList;

public class AdjacentList<W> implements Graph<Integer,W> {
	DirtyListDecorator[] adjacents;
//	ArrayList dirty;
	
	public AdjacentList(LinkedList[] adjacents) {
		initAdjacentsList(adjacents);	
//		initDirtyTable();
	}
	
	@Override
	public int numberOfVerts() {
		return adjacents.length;
	}
//	
//	public List getDirtyTab() {
//		return dirty;
//	}

	@Override
	public int numberOfEdges() {
		throw new UnsupportedOperationException("notImplementedYet");
	}
	
	private void initAdjacentsList(LinkedList[] adjacents) {
		if ( adjacents != null ) {
			int argSize = adjacents.length;
			this.adjacents = new DirtyListDecorator[argSize];
			for(int i = 0; i<argSize; i++)
				this.adjacents[i] = new DirtyListDecorator(adjacents[i]);
		}
		else {
			this.adjacents = new DirtyListDecorator[0];
			this.adjacents[0] = new DirtyListDecorator(new LinkedList());
		}
	}
//
//	private void initDirtyTable() {
//		dirty = new ArrayList(this.adjacents.length);
//		for(int i = 0 ;i<dirty.size();i++)
//			dirty.set(i, false);
//	}
}
