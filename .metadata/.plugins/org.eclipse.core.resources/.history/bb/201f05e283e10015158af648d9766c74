package bt.core.collections.dataTypes;

import bt.core.collections.interfaces.List;
import bt.core.collections.iterators.Iterator;

public class GuardedLinkedListDoubleCopy extends AbstractList implements List {
	bt.core.collections.dataTypes.Element hdAndTail = new Element(null);
	private int size;
	
	public GuardedLinkedListDoubleCopy() {
		clear();
	}
	
	@Override
	public Iterator iterator() {
		return new ValueIterator(hdAndTail);
	}

	@Override
	public void add(Object val) {
		insert(size, val);
	}

	@Override
	public void clear() {
		hdAndTail.prev = hdAndTail;
		hdAndTail.next = hdAndTail;
		size = 0;
	}

	@Override
	public boolean contains(Object val) {
		return indexOf(val) != -1;
	}

	@Override
	public Object delete(int idx) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		
		Element old = getElement(idx);
		old.detach();
		--size;
		
		return old.val;
	}

//	@Override
//	public boolean delete(Object val) {
//		int retIdx = indexOf(val);
//		getElement(	retIdx ).detach();
//		--size;
//		return retIdx != -1;
//	}
	
	@Override
	public boolean delete(Object val) {
		Element el = hdAndTail.next;
		boolean retVal = false;
		
		while( el != hdAndTail && ! val.equals(el.val))
			el = el.next;
		
		if ( el != hdAndTail ) {
			el.detach();
			--size;
			retVal = true;
		}
		
		return retVal;
	}

	@Override
	public Object get(int idx) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		return getElement(idx).val;
	}

	@Override
	public int indexOf(Object val) {
		int idx = 0;
		Element cur = hdAndTail.next;
		
		while(cur != hdAndTail && !val.equals(cur.val)) {
			cur = cur.next;
			++idx;
		}
		return cur != hdAndTail ? idx : -1;
	}

	@Override
	public void insert(int idx, Object val) throws IndexOutOfBoundsException {
		if( idx < 0 || idx > size)
			throw new IndexOutOfBoundsException();
		
		new Element(val).attachBefore(getElement(idx));
		++size;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public Object set(int idx, Object val) throws IndexOutOfBoundsException {
		checkOutOfBounds(idx);
		
		Element old = getElement(idx);
		Object oldVal = old.val;
		
		old.val = val;
		return oldVal;
	}

	@Override
	public int size() {
		return size;
	}
	
	private Element getElement(int idx) {
		return idx < size / 2 ? 
				getElementForward(idx) :
					getElementBackwards ( idx);
	}
	
	private Element getElementForward(int idx) {
		Element cur = hdAndTail.next;
		
		for(int i = idx ; i > 0 ; i--)
			cur = cur.next;
		
		return cur;
	}
	
	private Element getElementBackwards(int idx) {
		Element cur = hdAndTail;
		
		for(int i = size - idx ; i > 0 ; i--)
			cur = cur.prev;
		
		return cur;
	}
	
	private void checkOutOfBounds(int idx) {
		if( isOutOfBounds ( idx ))
			throw new IndexOutOfBoundsException();
	}
	
	private boolean isOutOfBounds(int idx) {
		return idx < 0 || idx >= size;
	}
}
